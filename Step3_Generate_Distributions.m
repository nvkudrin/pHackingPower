% Program to generate and save p-hacked and non-p-hcked distributions of p-values
% The second part of the program generates p-hacked and non-p-hacked
% distribution and implied relative bias of reported estimates for Appendix
% I
% Paper: The Power of Tests for Detecting p-Hacking
% Authors: G. Elliott, N. Kudrin, K. Wuthrich

clear all
addpath('Functions')
load('Raw_Pseudo_Data/MC_raw_pseudo_data.mat') %use the file generated by PseudoDataGeneration.m
rng(12345)

H = [0, 1, 2, 3]; % 0,1,2 correspond to h=0,1,2, respectively. 3 corresponds to h_from_Pi_hat
K = [3, 5 ,7];    % number of covariates or instruments
nobs = 200;

%Pi = Gamma(0.8547432, 1.8690772) calculated by Step1_Methods_Matter_Data_Work.R
h_from_Pi_hat = gamrnd(0.8547432, 1.8690772, 1, 10^6);
b = [repmat([0;1;2], 1, 10^6); h_from_Pi_hat]/sqrt(nobs);

% Folder creation 
designs = {'CovariateSelection', 'IVSelection', 'LagLengthSelection', 'ClusterSelection'};
for i = 1:numel(designs)
    mkdir(fullfile('csvFiles/Distributions', designs{i}));
    mkdir(fullfile('Figures/Distributions', designs{i}));
end

for s = 1:2 % 1- and 2-sided tests
    for j = 1:4 % cases of H
        for GeneralToSpecific = 0:1
            if GeneralToSpecific == 1 && s == 2
                % Lag Length
                b_lag_length = ones(size(mcout_bias_laglength,1),1) * b(j, :); 
                [P0, P1, P1min] = NullAndAlternativeDistributions_var_laglength( ...
                    b_lag_length, mcout_bias_laglength, mcout_se_laglength, s, 0.05, mcout_bic_lag);
                dgp_id = ['LagLength_', int2str(H(j)), '_', int2str(s), 'sided_', int2str(GeneralToSpecific)];
                save_and_plot_p_distributions(P0, P1, P1min, ...
                    fullfile('Figures/Distributions', 'LagLengthSelection'), ...
                    fullfile('csvFiles/Distributions', 'LagLengthSelection'), ...
                    dgp_id, j, 1);

                % Cluster
                b_clust = ones(size(mcout_bias_cluster,1),1) * b(j, :);
                [P0, P1, P1min] = NullAndAlternativeDistributions_var_clust( ...
                    b_clust, mcout_bias_cluster, mcout_se_cluster, s, 0.05, GeneralToSpecific);
                dgp_id = ['Cluster_', int2str(H(j)), '_', int2str(s), 'sided_', int2str(GeneralToSpecific)];
                save_and_plot_p_distributions(P0, P1, P1min, ...
                    fullfile('Figures/Distributions', 'ClusterSelection'), ...
                    fullfile('csvFiles/Distributions', 'ClusterSelection'), ...
                    dgp_id, j, 1);
            end

            for k = 1:3 %cases of K
                % CovariateSelection
                if (GeneralToSpecific == 1 && s == 2) || ...
                   (GeneralToSpecific == 1 && s == 1 && k == 1) || ...
                   (GeneralToSpecific == 0 && s == 2 && k == 1)
                    
                    b_cov = ones(size(mcout_bias_cov,1),1) * b(j, :);
                    [P0, P1, P1min, ~, B1, B1min] = NullAndAlternativeDistributions( ...
                        b_cov, mcout_bias_cov, mcout_se_cov, s, 0.05, 7, K(k), GeneralToSpecific, "CovSel", []);
                    dgp_id = ['Covariate_', int2str(H(j)), int2str(K(k)), '_', int2str(s), 'sided_', int2str(GeneralToSpecific)];
                    save_and_plot_p_distributions(P0, P1, P1min, ...
                        fullfile('Figures/Distributions', 'CovariateSelection'), ...
                        fullfile('csvFiles/Distributions', 'CovariateSelection'), ...
                        dgp_id, j, k);
                end

                % IVSelection and IVF
                if GeneralToSpecific == 1 && s == 2 && k < 3
                    if k == 1
                        b_iv = ones(size(mcout_bias_iv3,1),1) * b(j, :) / 3;
                        F_screen = mcout_F_iv3;
                        mcout_bias_iv = mcout_bias_iv3;
                        mcout_se_iv   = mcout_se_iv3;
                        n_inst = 3;
                    else
                        b_iv = ones(size(mcout_bias_iv5,1),1) * b(j, :) / 3;
                        F_screen = mcout_F_iv5;
                        mcout_bias_iv = mcout_bias_iv5;
                        mcout_se_iv   = mcout_se_iv5;
                        n_inst = 5;
                    end

                    [P0, P1, P1min, ~, B1, B1min] = NullAndAlternativeDistributions( ...
                        b_iv, mcout_bias_iv, mcout_se_iv, s, 0.05, n_inst, n_inst, GeneralToSpecific, "IV", []);
                    dgp_id = ['IV_', int2str(H(j)), int2str(K(k)), '_', int2str(s), 'sided_', int2str(GeneralToSpecific)];
                    save_and_plot_p_distributions(P0, P1, P1min, ...
                        fullfile('Figures/Distributions', 'IVSelection'), ...
                        fullfile('csvFiles/Distributions', 'IVSelection'), ...
                        dgp_id, j, k);

                    % IVF (screening)
                    [P0, P1, P1min] = NullAndAlternativeDistributions( ...
                        b_iv, mcout_bias_iv, mcout_se_iv, s, 0.05, n_inst, n_inst, GeneralToSpecific, "IV", F_screen);
                    dgp_id = ['IVF_', int2str(H(j)), int2str(K(k)), '_', int2str(s), 'sided_', int2str(GeneralToSpecific)];
                    save_and_plot_p_distributions(P0, P1, P1min, ...
                        fullfile('Figures/Distributions', 'IVSelection'), ...
                        fullfile('csvFiles/Distributions', 'IVSelection'), ...
                        dgp_id, j, k);
                end
            end
        end
    end
end

close all

%% For Appendix I: generate distributions and compute relative bias for Coariate Selections (H = [0.25:0.25:4.5]', K = 3, 2-sided, general-to-specific)
H = [0.25:0.25:4.5]'; 
K = 3;    % number of covariates or instruments
GeneralToSpecific = 1;
s = 2; % 2-sided tests
nobs = 200;

b = [repmat(H, 1, 10^6)]/sqrt(nobs);

% RelativeBias will store DGP identifiers and values
RelativeBias = {};
% Folder creation 
design = {'CovariateSelection'};
mkdir(fullfile('csvFiles/ForAppendixI/Distributions', design));


for j = 1:length(H) % cases of H
                % CovariateSelection           
                    b_cov = ones(size(mcout_bias_cov,1),1) * b(j, :);
                    [P0, P1, P1min, ~, B1, B1min] = NullAndAlternativeDistributions( ...
                        b_cov, mcout_bias_cov, mcout_se_cov, s, 0.05, 7, K, GeneralToSpecific, "CovSel", []);
                    dgp_id = ['Covariate_', int2str(j), '_', int2str(K), '_', int2str(s), 'sided_', int2str(GeneralToSpecific)];
                    RelativeBias(end+1,:) = {[dgp_id, '_Threshold'], mean((B1))/b_cov(1)};
                    RelativeBias(end+1,:) = {[dgp_id, '_Minimum'], mean((B1min))/b_cov(1)};
                    csvwrite(fullfile('csvFiles/ForAppendixI/Distributions/CovariateSelection', ['P0_', dgp_id, '.csv']), P0);
                    csvwrite(fullfile('csvFiles/ForAppendixI/Distributions/CovariateSelection', ['P1_', dgp_id, '.csv']), P1);
                    csvwrite(fullfile('csvFiles/ForAppendixI/Distributions/CovariateSelection', ['P1min_', dgp_id, '.csv']), P1min);
end

close all
writecell(RelativeBias, 'csvFiles/ForAppendixI/Relative_Bias.csv');

